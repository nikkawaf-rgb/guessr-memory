// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function cleanDatabase() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π...\n');
  
  try {
    // –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–∏–∑-–∑–∞ foreign keys)
    
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ CommentLike...');
    try {
      const commentLikes = await prisma.commentLike.deleteMany({});
      console.log(`‚úì –£–¥–∞–ª–µ–Ω–æ ${commentLikes.count} –∑–∞–ø–∏—Å–µ–π CommentLike`);
    } catch (e) {
      console.log('  (—Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ –æ—á–∏—â–µ–Ω–∞)');
    }
    
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ Report...');
    try {
      const reports = await prisma.report.deleteMany({});
      console.log(`‚úì –£–¥–∞–ª–µ–Ω–æ ${reports.count} –∑–∞–ø–∏—Å–µ–π Report`);
    } catch (e) {
      console.log('  (—Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ –æ—á–∏—â–µ–Ω–∞)');
    }
    
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ Comment...');
    try {
      const comments = await prisma.comment.deleteMany({});
      console.log(`‚úì –£–¥–∞–ª–µ–Ω–æ ${comments.count} –∑–∞–ø–∏—Å–µ–π Comment`);
    } catch (e) {
      console.log('  (—Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ –æ—á–∏—â–µ–Ω–∞)');
    }
    
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ UserAchievement...');
    try {
      const userAchievements = await prisma.userAchievement.deleteMany({});
      console.log(`‚úì –£–¥–∞–ª–µ–Ω–æ ${userAchievements.count} –∑–∞–ø–∏—Å–µ–π UserAchievement`);
    } catch (e) {
      console.log('  (—Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ –æ—á–∏—â–µ–Ω–∞)');
    }
    
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ Achievement...');
    try {
      const achievements = await prisma.achievement.deleteMany({});
      console.log(`‚úì –£–¥–∞–ª–µ–Ω–æ ${achievements.count} –∑–∞–ø–∏—Å–µ–π Achievement`);
    } catch (e) {
      console.log('  (—Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ –æ—á–∏—â–µ–Ω–∞)');
    }
    
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ PhotoPeopleZone...');
    try {
      const zones = await prisma.photoPeopleZone.deleteMany({});
      console.log(`‚úì –£–¥–∞–ª–µ–Ω–æ ${zones.count} –∑–∞–ø–∏—Å–µ–π PhotoPeopleZone`);
    } catch (e) {
      console.log('  (—Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ –æ—á–∏—â–µ–Ω–∞)');
    }
    
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ Person...');
    try {
      const persons = await prisma.person.deleteMany({});
      console.log(`‚úì –£–¥–∞–ª–µ–Ω–æ ${persons.count} –∑–∞–ø–∏—Å–µ–π Person`);
    } catch (e) {
      console.log('  (—Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ –æ—á–∏—â–µ–Ω–∞)');
    }
    
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ Location...');
    try {
      const locations = await prisma.location.deleteMany({});
      console.log(`‚úì –£–¥–∞–ª–µ–Ω–æ ${locations.count} –∑–∞–ø–∏—Å–µ–π Location`);
    } catch (e) {
      console.log('  (—Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–∂–µ –æ—á–∏—â–µ–Ω–∞)');
    }
    
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ Guess...');
    const guesses = await prisma.guess.deleteMany({});
    console.log(`‚úì –£–¥–∞–ª–µ–Ω–æ ${guesses.count} –∑–∞–ø–∏—Å–µ–π Guess`);
    
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ SessionPhoto...');
    const sessionPhotos = await prisma.sessionPhoto.deleteMany({});
    console.log(`‚úì –£–¥–∞–ª–µ–Ω–æ ${sessionPhotos.count} –∑–∞–ø–∏—Å–µ–π SessionPhoto`);
    
    console.log('–£–¥–∞–ª–µ–Ω–∏–µ Session...');
    const sessions = await prisma.session.deleteMany({});
    console.log(`‚úì –£–¥–∞–ª–µ–Ω–æ ${sessions.count} –∑–∞–ø–∏—Å–µ–π Session`);
    
    console.log('\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!');
    console.log('–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é: npx prisma db push --accept-data-loss');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

cleanDatabase();
