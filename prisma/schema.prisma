// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== Enums =====

enum UserRole {
  admin
  player
}

// ===== Models =====

// Пользователь - просто имя, без паролей и проверок
model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String   // Имя пользователя (может повторяться)
  role      UserRole @default(player)
  
  sessions  Session[]
}

// Фотография с датой из EXIF
model Photo {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  storagePath  String    // путь в Supabase Storage
  originalName String?   // оригинальное название файла
  fileSize     Int?      // размер файла
  mimeType     String?   // тип файла
  width        Int?
  height       Int?
  isActive     Boolean   @default(true)
  
  // EXIF дата - это единственный вопрос в игре
  exifTakenAt  DateTime? // дата из EXIF (YYYY:MM:DD HH:mm:ss)
  exifRaw      Json?     // полные EXIF данные для админа
  
  // Спецвопрос (опционально)
  specialQuestion     String?  // Текст спецвопроса
  specialAnswerCorrect String? // Правильный ответ
  
  sessionPhotos SessionPhoto[]
}

// Игровая сессия - только рейтинговая
model Session {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  finishedAt      DateTime? // null = в процессе, not null = завершена
  photoCount      Int       // количество фото в сессии
  totalScore      Int       @default(0) // итоговый счет
  currentPhotoIndex Int     @default(0) // текущее фото (0-based)
  
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  sessionPhotos   SessionPhoto[]
  
  @@index([userId])
  @@index([finishedAt]) // для лидерборда
}

// Связь сессии и фото
model SessionPhoto {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  
  sessionId  String
  session    Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  photoId    String
  photo      Photo    @relation(fields: [photoId], references: [id])
  
  orderIndex Int      // порядковый номер фото в сессии
  showSpecial Boolean @default(false) // Показывать ли спецвопрос для этого фото в этой игре
  
  guess      Guess?   // одна попытка на фото
  
  @@index([sessionId])
  @@index([photoId])
}

// Попытка угадать дату
model Guess {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  
  sessionPhotoId String  @unique
  sessionPhoto   SessionPhoto @relation(fields: [sessionPhotoId], references: [id], onDelete: Cascade)
  
  // Ответы пользователя
  guessedYear   Int?
  guessedMonth  Int?
  guessedDay    Int?
  guessedSpecial String? // Ответ на спецвопрос
  
  // Результаты
  yearHit       Boolean @default(false)  // год совпал
  monthHit      Boolean @default(false)  // месяц совпал
  dayHit        Boolean @default(false)  // день совпал
  specialHit    Boolean @default(false)  // спецвопрос совпал
  scoreDelta    Int     @default(0)      // очки за это фото
  timeSpentSec  Int?                     // время на ответ
  
  @@index([sessionPhotoId])
}
